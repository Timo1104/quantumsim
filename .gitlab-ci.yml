image: "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "api"'

stages:
  - build_image
  - build
  - test
  - deploy

build docker image:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: build_image
  before_script:
    - |
      echo "{\"auths\": {
        \"$CI_REGISTRY\": {
          \"username\": \"gitlab-ci-token\",
          \"password\": \"$CI_BUILD_TOKEN\"}
        }
      }" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/.ci/Dockerfile
      --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      changes:
        - .ci/Dockerfile
        - requirements*.txt
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

build html documentation:
  stage: build
  before_script:
    - source /root/venv/bin/activate
    - python setup.py install
  script:
    - cd doc && make html
  artifacts:
    paths:
    - doc/build/html
    expire_in: 1 hour

build distribution packages:
  stage: build
  before_script:
    - source /root/venv/bin/activate
  script:
    - python setup.py check --strict
    - python setup.py sdist bdist_wheel
  artifacts:
    paths:
      - dist
    expire_in: 1 day

run tests:
  stage: test
  needs:
    - job: build distribution packages
      artifacts: true
  before_script:
    - source /root/venv/bin/activate
    - pip install dist/quantumsim-*-py3-none-any.whl
  script:
    - pytest --cov=quantumsim --cov-report=xml
  artifacts:
    paths:
    - coverage.xml

check for broken links in doc:
  stage: test
  needs:
    - job: build html documentation
      artifacts: true
  before_script:
    - source /root/venv/bin/activate
    - python setup.py install
  script:
    - cd doc && make linkcheck
  allow_failure: true

pages:
  stage: deploy
  needs:
    - job: build html documentation
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: always
  environment:
    name: $CI_COMMIT_REF_NAME
    url: https://quantumsim.gitlab.io/quantumsim/$CI_COMMIT_REF_SLUG
  script:
    - mkdir -p public
    - cp -R doc/build/html public/$CI_COMMIT_REF_SLUG
  artifacts:
    name: sphinx_build_$CI_COMMIT_REF_SLUG
    paths:
      - public
    when: always

upload documentation to docs repo:
  stage: deploy
  only:
    - master@quantumsim/quantumsim
    - stable/v0.2@quantumsim/quantumsim
    - /\Av\d+\.\d+\.\d+\z/
  before_script:
    - mkdir -p /etc/ssh
    - ssh-keyscan -t rsa gitlab.com >> /etc/ssh/ssh_known_hosts
  script:
    - mkdir -p ~/.ssh && touch ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
    - echo "${QUANTUMSIM_DOC_DEPLOY_KEY}" | base64 -d > ~/.ssh/id_rsa
    - cd doc/build/html
    - git init
    - git config --local user.name "quantumsim ci worker"
    - git config --local user.email "quantumsim@nomail"
    - git remote add docs_deploy_origin "${QUANTUMSIM_DOC_GIT_URL}"
    - git checkout -b ${CI_COMMIT_REF_NAME}
    - git add .
    - git commit --allow-empty -m "deploy docs for ${CI_COMMIT_TAG:-$CI_COMMIT_SHA}"
    - git push --force docs_deploy_origin ${CI_COMMIT_REF_NAME}
    # Trigger quantumsim.gitlab.io rebuild
    - curl -X POST -F "token=${QUANTUMSIM_WEBSITE_TRIGGER_TOKEN}" -F ref=master
      ${QUANTUMSIM_GITLAB_URL}/api/v4/projects/${QUANTUMSIM_WEBSITE_PROJECTID}/trigger/pipeline

# We will upload a new release to PyPI if tag vX.X.X is pushed
upload new release to PyPI:
  stage: deploy
  needs:
    - job: build distribution packages
      artifacts: true
  only:
    - /\Av\d+\.\d+\.\d+\z/
  except:
    - branches
  before_script:
    - source /root/venv/bin/activate
  script:
    - twine upload dist/*
